name: Build and Push Container

on:
  push:
    tags:
      - 'v*.*.*' # Only build containers for version tags

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch full history to check branch

      - name: Verify tag is on main branch
        run: |
          # Check if the tag is reachable from main branch
          if ! git merge-base --is-ancestor ${{ github.sha }} origin/main; then
            echo "‚ùå Tag ${{ github.ref_name }} is not on main branch"
            echo "Container images are only built for tags on the main branch"
            exit 1
          fi
          echo "‚úÖ Tag ${{ github.ref_name }} is on main branch - proceeding with build"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set release version
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}
          IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          echo "üèóÔ∏è  Building container with version: ${{ env.VERSION }}"
          docker build \
            --build-arg VERSION=${{ env.VERSION }} \
            -t $IMAGE:${{ env.VERSION }} \
            -t $IMAGE:latest \
            .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: ${{ env.IMAGE }}:${{ env.VERSION }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image
        run: |
          docker push $IMAGE:${{ env.VERSION }}
          docker push $IMAGE:latest

      - name: Container build summary
        run: |
          echo "‚úÖ Container image built and pushed successfully"
          echo "üì¶ Image: ${{ env.IMAGE }}:${{ env.VERSION }}"
          echo "üì¶ Latest: ${{ env.IMAGE }}:latest"
          echo "üè∑Ô∏è  Tag: ${{ env.VERSION }}"

